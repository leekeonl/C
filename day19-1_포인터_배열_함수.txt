#include <stdio.h>

void main(){

/*
1차원 배열과 포인터
: 배열 변수이름은 그 배열의 시작 주소를 의미한다. 
  포인터는 주소를 받아들이므로 포인터에서 배열에 접근하여 사용할 수 있다.
① 1차원 배열에서는 배열 이름이 0번째 요소의 시작 주소를 의미한다.
   배열명 = &배열명[0]
② 1차원 배열에서 첨자는 상대 번지를 의미한다.
   배열명[첨자] = *(배열명 + 첨자)
③ 1차원 배열에서 “배열이름 + 첨자”를 하게 되면 “첨자 * 자료형”의 크기만큼 증가하게 된다.
④ 형식 : 주소 == 배열명 + 첨자
                  &배열명[첨자]
            값 == *(배열명 + 첨자)
                   배열명[첨자]

ex ) int a[3] = { 10, 20, 30 ]

     배열의 값 표현	a[0]		a[1]		a[2]
		       *&a[0]	       *&a[0]	       *&a[0]
			 *a	       *(a+1)	       *(a+1)
     		   ----------------------------------------------- 	
	메모리      |     10      |	 20       |      30      |
		   -----------------------------------------------
		100	       104	 	108	
    배열의 주소 표현	&a[0]	 	&a[1]		&a[2]	
			  a		 a+1		 a+2  
*/

//----------------------------------------------------------------------

	// 포인터의 대상 배열 접근
	/*
	int  a[5]={10, 20, 30, 40, 50};
	int  *pta  =  a;							

	printf(“ pta + 0 = %d \n”,  *(pta +0) );
	printf(“ pta + 1 = %d \n”,  *(pta +1) );	
	printf(“ pta + 2 = %d \n”,  *(pta +2) );	
	printf(“ pta + 3 = %d \n”,  *(pta +3) );	
	printf(“ pta + 4 = %d \n”,  *(pta +4) );	
	*/	

	/*
	int  a[5]={10, 20, 30, 40, 50};
	int  *pta  =  a;							

	printf("pta + 0 = %d \n",  pta[0] ); //pta[3] = *(pta+3) 어레이가 포언터 접근방법
	printf("pta + 1 = %d \n",  pta[1] );	
	printf("pta + 2 = %d \n",  pta[2] );	
	printf("pta + 3 = %d \n",  pta[3] );	
	printf("pta + 4 = %d \n",  pta[4] );
	*/

//----------------------------------------------------------------------

	// scanf() 이용
	/*
	int a[3];		
	int *pta = a;

	printf("정수 입력 : ");		scanf("%d", pta );
	printf("정수 입력 : ");		scanf("%d", pta+1 );
	printf("정수 입력 : ");		scanf("%d", pta+2 );

	printf("pta + 0 = %d \n",  pta[0] );	
	printf("pta + 1 = %d \n",  pta[1] );	
	printf("pta + 2 = %d \n",  pta[2] );	
	*/

	/*
	int  a[5]={1,2,3,4,5};	   int  *p;
	p = a;
	printf("배열 주소 =  %d, 포인터   *(p+0) = %d,   \n", p,  *p );	
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  p+0, *(p+0)  );
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  p+1, *(p+1)  );	
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  p+2, *(p+2)  );

	printf("배열 주소 =  %d, 포인터   *(p+0) = %d,   \n", p,  *p );	
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  a+0, *(a+0)  );
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  a+1, *(a+1)  );	
	printf("배열 주소 =  %d, 배열의 값 == %d  \n",  a+2, *(a+2)  );
	//배열명은 시작주소를 의미하므로, 포인터와 같이 *를 사용할 수 있다.
	*/

//=================================================================================

/*
2차원 배열과 포인터
① 2차원배열에서는 행 이름이 해당 행의 시작주소를 의미한다.
   배열명[0] = &배열명[0][0]
   배열명[1] = &배열명[1][0]
② 2차원 배열에서 행의 이름은 기준 번지를 열은 상대번지를 의미한다.
   배열명[행][열] = *(배열명[행]+열)
③ 행 이름에 n번지 증가시키면 (요소 1개 크기 *n) 바이트 만큼의 번지가 증가된다.
   배열명[행] + n번지 = 배열명[행] + (n * 요소1개의 크기만큼의 바이트)
④ 2차원 배열에서 배열 이름에 n번지 증가시키면 “n * 한행의 바이트 수”만큼의 번지
   증가된다.
   배열명 + n번지 = 배열명 + n * 한행의 바이트 수
⑤ 형식 : 주소 == *(배열명 + 행) + 열
                      변수명[행] + 열
                     &변수명[행]  [열]

	    값 == *(*(배열명 + 행) + 열)
		       *변수명[행] + 열
		        변수명[행]  [열]
*/

	// 포인터와 2차원 배열 선언과 접근
	/*
	int a[3][2] = { {10,11}, {20,21}, {30, 31} };
	int (*pta)[2];
	
	pta = a;
	
	printf(“%d \n”, *(pta[1]) );
	printf(“%d \n”, *(pta[1]+1));
	*/

//=================================================================================

/*
배열 포인터
: 포인터 변수도 변수임으로 배열로 만들 수 있다. 
  포인터 변수를 배열로 만들면 배열의 원소 하나하나가 포인터 변수가 된다.
*/
	//포인터 배열 선언 및 접근
	/*
	int a=10, b=20, c=30;
	char ca='o', cb='k', cc='!';
	int *pta[3];
	char *ptb[3];

	pta[0] = &a;
	pta[1] = &b;
	pta[2] = &c;
	ptb[0] = &ca;
	ptb[1] = &cb;
	ptb[2] = &cc;

	printf("*pta[0] : %d \n", *pta[0]);
	printf("*pta[1] : %d \n", *pta[1]);
	printf("*pta[2] : %d \n", *pta[2]);

	printf("*ptb[0] : %c \n", *ptb[0]);
	printf("*ptb[1] : %c \n", *ptb[1]);
	printf("*ptb[2] : %c \n", *ptb[2]);
	*/

}

//=================================================================================

/*
함수 포인터
- 함수의 자료 전달 방법
  ① 값에 의한 전달 - call by value
     - 일반적인 호출 방식으로 호출함수의 변수값을 복사해서 전달하는 방식이다.
     - 호출함수의 변수에는 아무런 영향을 주지 않는다

  ② 참조에 의한 전달( call by address )
     - 호출함수의 변수 주소를 넘겨주는 방식이다
     - 호출함수의 변수에 영향을 줄 수 있다.
     - 여러 개의 결과값을 호출함수로 돌려주는 효과가 있다. 
       원래 리턴은 1개만 할 수 있다.
*/

// 기존 함수 - call by value
/*	
#include <stdio.h>

void func( int sa, int sb ) ;

void main()
{
	int ma=100, mb=200;
	func (ma, mb);
	printf("값2 : %d %d\n", ma, mb);
}

void func(int sa, int sb) {
	sa += 5;	
	sb += 5;
	printf ("값1 : %d %d\n", sa, sb) ;
}
*/

void func( int * sa, int * sb ) ;

void main()
{
    int ma=100, mb=200;
    func (&ma, &mb);
    printf("값2 : %d %d\n", ma, mb);
}

void func(int * sa, int * sb) {
    *sa += 5;
    *sb += 5;
}

// 함수를 이용한 포인터

/*
#include <stdio.h>

void swap (int *x, int *y);

main( )
{
   int a=100, b=200 ;
   printf ("교환전 : a=%d, b=%d\n", a, b );
   swap( &a, &b );
   printf ("교환후 : a=%d, b=%d\n", a, b );
}

void  swap ( int *x, int *y )
{
   int tmp;
   tmp = *x;
   *x = *y ;
   *y = tmp;
}
*/

//-----------------------------------------------------

// 특정 문자 바꾸기
/*
#include <stdio.h>
void  fpr( char * );

void  main( ) {

	char  ch[] = "abcde";
	fpr(ch);
	printf("%s  \n", ch);
}

void  fpr( char  *ptch  ) {

	*(ptch+2) = 'z' ;

}
*/

//---------------------------------------------------------

// 예제 - 소문자를 대문자로 변환
/*
#include <stdio.h>

void  Upper( char * s);

void main ( void ) {
    char string[ ]="characters";

    printf ("변환 전의 스트링 : %s\n" , string);
    Upper(string);
    printf ("변환 후의 스트링 : %s\n" , string);
}

void  Upper( char * s ){
    while ( *s != '\0' ) {
       if (*s >= 'a' && *s <= 'z' )
	  *s = *s - 32;   // ASCII 대문자  변환 
       ++s;			  // 다음  문자로  포인터  증가 
    }
}
*/

//---------------------------------------------------------

// 예제 - 큰수찾기
/*
#include <stdio.h>
void  fc(int* pta, int* ptb, int* ptmax);
void  main() {

	int  a,  b;
	int  max;
	printf ( " 두 개의 정수 입력  : ");
	scanf ( "%d%d", &a, &b);

	fc(&a, &b, &max);

	printf("큰 수 : %d \n", max);
}
void  fc(int *pta, int *ptb,  int  *ptmax) {

	if ( *pta > *ptb ) {
		*ptmax = *pta;

	} else if ( *pta < *ptb ) {
		*ptmax = *ptb;
	}	      
}
*/

//---------------------------------------------------------

// arr[5]배열선언후 랜덤한(난수) 100이하의 수를 배열에 저장후에 
// 정렬 없이 큰 수 && 작은수 구하시오.
/*
#include<stdio.h>
#include<time.h>
#include<stdlib.h>	//100이하의 난수 ,큰수 작은수 구하기.
void Max_Min(int *arr,int *max,int *min);
void main(){
	int arr[5];
	int max,min,i;
	srand(time(NULL));
	for(i=0;i<5;i++)
		arr[i]=rand()%100+1;
	for(i=0;i<5;i++)
		printf("%d ",arr[i]);
	Max_Min(arr,&max,&min);
	printf("\nmax=%d min=%d\n",max,min);
}
void Max_Min(int *arr,int *max,int *min){
	int i;
	*max=*(arr+0);
	*min=*(arr+0);
	for(i=1;i<5;i++){
		if(*(arr+i)>*max)
			*max=*(arr+i);
		if(*(arr+i)<*min)
			*min=*(arr+i);
	}
}
*/










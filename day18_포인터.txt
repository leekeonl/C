#include <stdio.h>

void main(){

/*
포인터
: 메모리에 있는 data의 주소를 포인터라 한다. 즉, 포인터는 메모리에 있는 data의 위치를 표현한
  수치이다. 메모리의 주소는 16진수 8자리로 구성되어 있으며 이 주소를 포인터라 한다.

포인터 변수
- 포인터 값(주소 값)을 보관하기 위해 만든 변수를 포인터 변수라 한다. 
- 포인터 변수는 어떠한 data가 있는 곳의 주소값을 보관하며 
  이때 "포인터 변수가 data를 가리키고 있다." 라고 표현한다. 
- data의 크기가 1byte 이상이라 여러 개의 주소가 있다고 해도 data의 시작주소가 대표주소가
  되며 data의 포인터 값이라 하면 이 시작주소를 의미한다.

포인터 변수 특징
① 변수를 만들 때 앞쪽에 * 기호를 붙이면 포인터 변수가 만들어 진다.
② 포인터 변수는 오직 주소값만 보관 할 수 있다. 단, 자신이 만들어 질 때 사용한 자료형과 같은
  자료형을 가지는 data의 주소값만 보관시킬 수 있다.
③ 포인터 변수의 크기는 자료형에 상관없이 4byte이다. 
④ 포인터 변수는 +1할 때마다 자신이 주소값을 보관 할 수 있는 data의 크기만큼 증가한다.
⑤ 포인터 변수를 사용하면서 앞쪽에 *를 붙이면 역참조가 된다.
   역참조를 이용해 포인터가 가리키는 변수의 data를 변경 할 수 있다.

   ※ 역참조란 포인터 변수가 가지고 있는 주소를 따라 이동해 그 안의 data를 가져오는 것이다.
      즉, 포인터 변수가 가리키는 곳에 있는 값을 꺼내온다.

포인터 변수 선언
: 포인터 정보를 저장 할 공간을 생성 

ex )  가리키는 변수의 자료형		포인터변수명	
		int   		*	     pta;

포인터 변수의 초기화
: 찾아갈 주소를 포인터변수에 저장

ex )	int a;		// 정수형 a변수 메모리에 할당
	int * pta;	// 정수형 포인터 변수 pta 메모리에 할당
	pta = &a;	// 변수 a의 주소를 pta에 저장

	int a;
	int * pta = &a;
*/

//----------------------------------------------

	// 포인터 선언
	/*
	int a = 10;	 
	int *pta;
	
	pta = &a;

	printf("변수 a의 주소값 : %d  \n", &a); // 1606416284 
	printf("포인터변수 pta 공간에 저장된 값 : %d  \n", pta); // 1606416284 
	*/

	/*
	int a=10;	 		
	float b = 20.1;
	double c = 30.1; 		
	char d = 'G';

	int *pta = &a;		
	float *ptb = &b;
	double *ptc = &c;		
	char *ptd = &d;

	printf("pta 에 담긴 주소  :  %d  \n",   pta );
	printf("ptb 에 담긴 주소  :  %d  \n",   ptb );
	printf("ptc 에 담긴 주소  :  %d  \n",   ptc );
	printf("ptd 에 담긴 주소  :  %d  \n",   ptd );
// give address
	*/

//------------------------------------

	// 포인터 선언과 이용
	/*
	int a=10;
	float b = 20.1;
	double c = 30.1;     
	char d = 'G';

	int *pta = &a;		    float *ptb = &b;
	double *ptc = &c;   	char *ptd = &d;

	printf("*pta 로 a의 값 출력  :  %d  \n",   *pta );
	printf("*ptb 로 b의 값 출력  :  %f  \n",   *ptb );
	printf("*ptc 로 c의 값 출력  :  %f  \n",   *ptc );
	printf("*ptd 로 d의 값 출력  :  %c  \n",   *ptd );
* going toward to value
	*/

//------------------------------------

	/*
	int a, *ap;
	
	ap=&a; //a의 주소가 저장되고

	*ap=5; //* 와 & 서로 캔슬하고 a =5로 남는다 

	printf("%d\n", a); // a = 5
	*/

//------------------------------------

	// 포인터 변수의 크기
	/*
	char a = 'A';		double  b = 12.345;

	char *pta;			double *ptb;

	pta = &a;			ptb = &b;	

	printf("pta의 크기 : %d \n",  sizeof(pta) );//포인터크기는 8
	printf("ptb의 크기 : %d \n",  sizeof(ptb) );

	printf("*pta의 크기 : %d \n",  sizeof(*pta) );//접근한사이즈
	printf("*ptb의 크기 : %d \n",  sizeof(*ptb) );

	// 포인터변수의 크기는 4byte.
	// 포인터변수의 자료형은 주소가 가리키는 변수의 자료형을 의미한다.
	*/

//------------------------------------

	// 포인터의 대상 변수 연산
	/*
	int n1 = 10,  n2;
	int *ptn1, *ptn2;          

	ptn1 = &n1;		ptn2 = &n2;

	*ptn2 = 5;	
	*ptn1 = *ptn1 + *ptn2;

	printf("ptn1 : %d \n", ptn1);//주소 밸류저장할때 &씀
	printf("*ptn1 : %d \n", *ptn1);//15
	printf("n1 : %d \n", n1);//15
	*/

//------------------------------------
	
	// 문제
	/*
	int i=5, j=10;
	int *p=&i, *q=&j;

	printf("(1) i = %d, j = %d\n", i, j);
	printf("(2) &i = %d, &j = %d\n", &i, &j);
	printf("(3) p = %d, q = %d\n", p, q);
	printf("(4) p = %d, q = %d\n", &p, &q);
	printf("(5) *p = %d, *q = %d\n", *p, *q);
	printf("(6) p == &i ==> %d\n", p == &i);
	*/

//------------------------------------

	//포인터의 연산과 의미
	/*
	int a = 10;
	double b = 3.14;
	int *pta, *ptb;
	
	pta = &a;
	ptb = &b;

	printf("pta = %d \n",  pta);
	printf("pta  + 1 = %d \n",  pta + 1);
	printf("pta  + 2 = %d \n",  pta + 2);
	
	printf("ptb = %d \n",  ptb);
	printf("ptb  + 1 = %d \n",  ptb + 1);
	printf("ptb  + 2 = %d \n",  ptb + 2);
	// 포인터변수의 연산은 가리키는 변수의 자료형 크기 단위 기준이다.
	// 포인터변수에 1을 더하면 주소값이 1증가하게 된다.
	*/























}
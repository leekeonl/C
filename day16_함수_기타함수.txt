#include <stdio.h>

void main() {
	
	/*
	문자열 배열 - 1차원 배열 표현
	1. char(문자)를 배열 처리하면 문자열(문장)을 저장 할 수 있다.
	2. 영문자는 1byte, 한글 문자는 2byte로 공간 2개를 사용 한다.
	3. C언어는 문장의 끝에 자동으로 NULL문자(\0)를 넣어서 문자의 끝을 표시한다.
	   그러므로, 문자열을 표시 할 공간외에 1byte의 공간을 더 확보해야 한다.   
	4. 배열 크기에 비해 문자열 길이가 작으면 나머지는 NULL문자(\0)로 채워진다.
	
	ex ) 				-------------------------------
	     char str[7]="HELLO";  =>	| H | E | L | L | O | \0 | \0 |
	     				-------------------------------
				   str	 [0] [1] [2] [3] [4]  [5] [6]
					
					----------------------
             char str[5]="한글";   => 	|  한   |   글  | \0 | 
	    				----------------------    
	     			   str	 [0] [1] [2] [3] [4]

	5. 배열 이름은 그 자체가 배열 전체의 시작주소를 의미한다.
 	6. 선언과 동시에 초기화하는 경우에만 대입연산자(=기호)사용 할 수 있고,
	   그 이외의 경우에는 사용 할 수 없다.	
    
	ex ) 정상 : char str[20]="show string";
	     에러 : char err[20];
		    err="이러면 안된다";		
	*/

//===========================================================
	
	/*
	문자열 배열 - 2차원 배열 표현
	1. 행 갯수 자리에는 문장의 총 개수를 입력
	2. 열 갯수 자리에는 문장에 사용되는 문자열의 길이 입력
	3. 출력을 할 때에는 출력하고자 하는 행 번호를 입력한다.
	*/
	
	// 다중 문자열 저장 및 출력
	/*
	char str[3][50]={"1번째 문자열","2번째 문자열","are 유 OK!!"};

	printf("%s\n",str[0]);
	printf("%s\n",str[1]);
	printf("%s\n",str[2]);
	printf("----------------------\n");
	printf("이해가 되나요?\n%s\n%s\n%s\n",str[0],str[1],str[2]);	
	*/


//=============================================================

	/*
	문자열 함수
	 : #include <string.h> - 문자열 함수 사용을 알리는 헤더 파일을 포함 시킨다.
 	*/

	/*
	문자열 대입 함수
	strcpy();
	    : 문자열을 복사해 주는 함수.
	      문자열 배열에 문장을 대입하는 경우에 사용.	 

	ex ) strcpy(복사할 공간, 복사할 내용 입력 공간);
	*/
	
	// 문자열 대입
	/*
	char before[20]="대입전";
	char after[20];

	strcpy(after, "copy ok!");
	printf("before = %s, ",before);	    printf("after = %s\n", after); 
	// 출력 : before = 대입전, after = copy ok!
	
	strcpy(before, after);
	printf("before = %s, ",before);	    printf("after = %s\n", after);

	// 출력 : before = copy ok!, after = copy ok!
	*/

//--------------------------------------------------------

	/*
	문자열 길이 구하는 함수
	strlen();
	    : NULL(\0) 값을 제외한 문자열의 길이를 반환하는 함수
	      한글에는 적용되지 않는다. 	

	ex ) strlen(배열명)
	*/

	// 문자열 길이 구하기
	/*
	char length[20] = "ABCDE";
	printf("%d \n",  strlen(length) );
	// 출력 : 5

	strcpy( length , "123 567 9");
	printf("%d \n",  strlen(length) );
	// 출력 : 9
	*/

//---------------------------------------------------------

	/*
	문자열이 같은지 확인하는 함수
	strcmp();
	    : 문자열이 같은지 확인 할 때 사용.
	      같으면 '0'을, 다르면 '0이 아닌 수'를 반환 한다.
	      같은 않은지 확인 할 때에는 '!'를 붙여서 사용 한다.

	ex ) strcmp(문자열1, 문자열2)
	*/

	// 문자열 같은지 확인
	/*
	char same_1[30]="ab 같은가!";
	char same_2[30]="ab 같은가!";
	char same_3[30]="abc 같은가";
	
	printf("같다   : %d\n",strcmp(same_1, same_2));
	printf("같다   : %d\n",!strcmp(same_2, same_1));
	printf("틀리다 : %d\n",strcmp(same_3, same_1));

	printf("------------------------\n");

	if( !strcmp(same_1, same_2) ) {	
		printf("same_1은  same_2와 같다. \n");		// 1 이어야 같다를 출력

	} else {	
		printf("same_1과  same_2는 같지 않다. \n" );	// 0 이어야 같지 않다를 출력
	}
	*/
}

//-------------------------------------------------------------

/*
전역 변수
- 함수 밖에 선언된 변수를 말한다.
- 변수를 선언하면 메인 함수가 수행되기 이전에 변수가 생성되며,
  프로그램이 종료될 때 메모리에서 소멸된다 .
- 전역변수의 사용은 자제하는 편이 좋다.
- 주로 소스 코드 상단에 선언한다.
- 사용시 전역 변수 임을 알려 주는 변수명으로 작성하는게 좋다.
     ex )  global _ a , g _ a , all _ a …….
*/

// 전역 변수 사용 예
/*
#include <stdio.h>

void sub();   //함수 선언

int  sum=100 ;   //프로그램이 끝날 때까지 변수는 죽지 않음.
int  a = 10;

void main() {

    int  a;

    for( a=1 ; a<=3 ; a++ )
    	sub() ;
    
    printf ( "sum = %d\n" , sum ) ;
}
void sub(){
    sum += 10;
}
*/

//----------------------------------------

/*
지역 변수
- 함수 내에 선언된 변수를 말한다.
- 함수 내에서만 사용이 가능하다.
- 함수가 호출될 때마다 정의되는 성질을 가진다.
- 함수가 종료되면 모두 소멸 된다.
- main( )도 하나의 함수이기 때문에 이 함수 내에 선언한 변수도 지역 변수이다.
- 함수의 매개변수도 지역변수 이다.
*/

// 지역 변수의 사용 예
/*
#include <stdio.h>

void main()
{
	int num = 10;

	printf("%d\n" , num);
	if(num==10)
	{
		int n = 100;

		printf("%d\n" , n);
	}
	printf("%d\n" , num);
}

※ 지역변수의  특징은 블록 안에 있다는 것이다.
   비록 함수 안이라고 해도 블록이 만들어지면, 새로 변수를 정의할 수 있다.
*/

//----------------------------------------

// 전역 변수명과 지역 변수명이  같을  경우 
/*
#include <stdio.h>

int  hs=200; // 전역변수

void main( ) {

    int  hs=100;  // 지역변수

    printf ( "지역변수  hs의  값=%d\n ", hs ) ; 
		// 지역변수가 우선순위를 갖는다.

}

※ 지역 변수명과  전역 변수명이  같을  경우  지역변수( 해당 함수 ) 의       
    데이터  값을  처리  한다.
*/

//=====================================================================

/*
rand() 함수:임의의 값을 만들어 주는 함수

Header file : <stdlib.h>

기본 형식 : rand();

범위를 지정하여 임의의 값을 생성하는 경우
: rand( ) % 갯수  + 시작 수;
*/

// rand() 함수 - 임의의 값 출력
/*
#include <stdio.h>
#include <stdlib.h>

void main( )
{
	int  num ,   i;
	
	for(i = 0;   i<5 ;   i++) 
	{
		num = rand();
		printf("%d\n" , num);
	}
}

*/

//----------------------------------------

/*
srand( ) 함수 : rand ( ) 함수의 초기값을 설정해주는 함수

Header file : <stdlib.h>

기본 형식 : srand(초기값);
*/

// srand() 함수 ? rand()의 초기값 설정
/*
#include <stdio.h>
#include <stdlib.h>
void   main( )
{
	int  num ,   i;

	srand( 10 );
	
	for(i = 0;   i<5 ;   i++) 
	{
		num = rand();
		printf("%d\n" , num);
	}
}
*/

//----------------------------------------

/*
time( ) 함수 : 1970년 1월 1일 0시부터 현재까지의 시간을 초단위로 반환해주는 함수

Header file : <time.h>

기본 형식 : time( NULL );

※ rand() 함수의 값이 일정하지 않도록 time( )를 이용하여 초기화 한 후 이용한다.
   - srand ( time(NULL) );
     .
     .
     rand();
*/

// time() 함수 - 시간을 srand()의 초기값으로 설정
/*
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void  main ( )
{
	int  num ,   i;

	srand ( time(NULL)  );
	
	for(i =0;   i<5 ;   i++) 
	{
		num = rand() ;
		printf("%d\n" , num);
	}
}
*/

//----------------------------------------

// rand() - %와 +를 이용한 범위 지정(1~19까지 발생)
/*
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void  main( )
{
	int  num ,   i;

	srand ( time(NULL)  );
	
	for( i =0 ; i<5 ; i++ ) 
	{
		num = rand( ) % 10 + 10;
		printf ( "%d\n" , num);
	}
}
*/

//예제 : 가위, 바위, 보 게임 기본 만들기
/*
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void   main( ) {
	int   n;	 int  com;
	while(1) {
 	   printf(“선택할 명령의 숫자를 입력하세요  : 가위(0) / 바위(1) / 보(2)”);
 	   printf(“ / 종료(3)\n”);		
	   scanf(“%d”,   &n);
	   
           srand(  time(NULL)  );
           com = rand() % 3; 
	   
           switch(n) {
		  case  0 : 	printf(“가위 선택 / %d 선택 \n”, com); 	   break;
		  case  1 : 	printf(“바위 선택 / %d 선택 \n”, com); 	   break;
		  case  2 : 	printf(“보 선택 / %d 선택 \n”, com);    	   break;
		  case  3 : 	printf(“게임을 종료합니다.\n”);    return;
		  default : 	printf(“잘못된 입력입니다. \n”);
	   }
	}   
}
*/

//------------------------------------------

/*
sleep() 함수란?
밀리언 초(1/1000초) 단위로 프로그램의 실행을 지연시키는 함수

Header file : <windows.h>

기본형식 : Sleep( 초);
*/
/*
#include <stdio.h>
#include <windows.h>
void  main( )
{
	int  num=0;

	while(1) {

		printf("%d\n",  num);
		num++;
		Sleep(1000);
	}
}
*/

//--------------------------------------

/*
System() 함수란?
콘솔 창에서 사용할 수 있는 명령어를 실행해주는 함수

Header file : <windows.h>

기본형식 : system( “명령어입력” );

예 : 화면을 깨끗이 지우는 명령어 ? cls
system( “cls” );


예 : 화면을 멈추는 명령어 - pause
system( “pause” );
*/
/*
#include <stdio.h>
#include <windows.h>
void  main( )
{
	int  num=0;

	while(1) {
		printf("%d\n", num);
		num++;
		Sleep(1000);
		
		if( num % 10 == 0 ) {
			system(“cls”);
		}	
	}
}
*/

//---------------------------------------------------------

// 메뉴 기본
/*
#include <stdio.h>		// printf(),  scanf()
#include <windows.h>	// system(), exit()
void   main(  ){
	int   num,   data;
	while(1) {
		printf("=================================\n");
		printf("1. 데이터 입력\n");
		printf("2. 데이터 출력\n");
		printf("3. 종료\n");
		printf("=================================\n");
		scanf("%d", &num);
		switch(num){
		case 1:
			printf("데이터를 입력하세요\n");
			scanf("%d", &data);   
			break;
		case 2:
			printf("%d", data); 
			system("pause");  
			break;
		case 3:exit(0);
		}
		Sleep(1000);
		system("cls");
	}
}		
*/

//======================================================\=====

/*
매크로
- 컴파일에 앞서 미리 정의되어 있는 자료로 단순 치환하는 것을 말한다.
- 프로그램 작성 시에 함수, 명령, 수식, 상수 값이 자주 사용될 때, 이들을 대표하는
  이름(별명)을 붙여서 사용하는 명령이다.
- 복잡한 수식을 간단하게 기술할 수 있다는 장점을 가진다.
- 매크로를 이용하여 프로그램의 수정을 하게 되면 보다 간단히 프로그램을 수정 할 수 있게 된다. 
  ( 프로그램의 변경이 예측되는 부분이나 중요 동작을 매크로로 지정하여 향후 수정 시 소스코드를 
   직접 수정하지 않고 매크로만 수정하면 프로그램이 수정되도록 한다.) 
  이러한 형태의 매크로 사용은 많이 할수록 프로그램 수정이 용이함으로 좋은 프로그램이 된다. 
  단, 너무 많이 사용하면 오히려 프로그램을 이해하기 어렵게 된다는 단점이 있다. 
- 매크로는 프로그램의 전처리부에 기록한다.

  ※ 전처리부 : 프로그램에서 가장 먼저 compile 되어지는 부분. #으로 시작하는 부분이다.

매크로정의 형식
#define 매크로명 원하는 내용

매크로 해제 형식
#undef 매크로명

※ 매크로명은 변수명과 동일한 규칙으로 사용자가 지정 할 수 있다.
   프로그램 중간에 매크로를 해제 하고 싶다면 #undef를 이용해 매크로의 사용을 중지 할 수 있다.

매크로의 사용 예
① #define MAX 100
② #define PI 3.141592
③ #define plus 10+20+30
④ #define pf printf
*/

//--------------------------------------

// 예제 - 매크로 사용 방법
/*
#include<stdio.h>
#define print printf

void main(){

   print("Good\n"); //compile시 print는 printf로 변경됨.
                    //즉, 선처리기에 의해 내부적으로 printf로 고쳐짐.
   
   printf("%d\n", 2+3); // ****printff로 고쳐지지 않음.****
   
   print("print"); //“print" 문자열은 고쳐지지 않음.

}
*/

//--------------------------------------

// 예제 - #undef 사용 방법
/*
#include<stdio.h>
#define print printf

void main(){

   print("Good\n");
   
   printf("%d\n", 2+3);

   #undef print // print라는 매크로 이름을 더 이상 사용하지 않겠다는 뜻,
                // 이후 print는 오류 발생.
   
   #define out printf //printf를 out이라는 이름으로 사용.
   
   out("print"); //printf("print")로 내부적으로 대체.
}
*/

//--------------------------------------

// 예제 - 상수나 수식에 대해서도 매크로(별명)를 부여하여 사용
/*
#include<stdio.h>
#define Min 0
#define Max 100+Min
#define Ln printf("\n");
#define Pa printf("a=%d",a)

void main(){

   int a;
   a = Max;
   Pa;
   a = Min;
   Ln
   Pa;

}
*/

//--------------------------------------

// 예제
#include<stdio.h>
#define r 3.5
#define pi 3.14
#define jegob (r*r)

void main(){

   double nulbi, dulre;
   
   nulbi = pi * jegob;
   dulre = 2 * pi * r;

   printf(“넓이=%.1f\n", nulbi);
   printf("둘레=%.1f\n", dulre);

}


#include <stdio.h>

void main(){

	/*
	자료형 :
	  데이터를 저장할 공간을 만드는 명령어
	  종류		자료형 형태		크기(byte)
	  정수		int			        4
	  실수		float			    4
			    double			    8
	  문자		char			    1
	*/

	/*
	변수 :
		1. 프로그램에서 사용하려고 만든 빈 공간의 이름
		2. 공간의 크기는 자료형으로 나타낸다.
		3. 빈 공간 안에는 변할 수 있는 값을 넣울 수 있다.
		4. 값이 변해도 공간은 변하지 않는다.
	변수 선언
		1. 메모리에 공간을 만들고 이름을 붙이는 것
		2. 변수의 선언은 반드시 가장 위쪽에서 먼저 실행해야 한다.
	변수의 초기화
		1. 변수 선언 후 최초로 값을 넣는 작업
		2. 변수 선언과 동시에 초기화가 가능하다
		3. 초기화를 하지 않으면 컴파일은 되지만 실행시 프로그램이 작동하지 않는다.
	변수의 작명 규칙
		1. 영문자, 숫자, 밑줄 만을 사용한다
		2. 첫 문자는 반드시 영문자 또는 밑줄(_)이어야 한다.
		3. C언어의 예약어는 변수명 사용 할 수 없다.
		4. 소문자와 대문자를 구별한다.
		5. 변수명 내에 공백을 둘 수 없다. 
	*/
	//int c=30;
	//int a,int b=20; 에러 
	//c=40; 에러
	//int a=10,b=20;

	/*
	int a=65;
	double d=1.0;
	int b=40;

	printf("%d\n",&a);
	printf("%d\n",&d);
	printf("%d\n",&b);
	*/

//==================================================

	// 8.888 를 변수에 저장한 후 출력
	// d 를 변수에 저장한 후 출력
	// 30 을 변수에 저장한 후 출력
	// 이순신 을 변수에 저장한 후 출력
	// 식 3.24 + 5.34 를 변수에 저장한 후 출력
	// 식 10+20 을 변수에 저장한 후 출력
	// 3.333 를 변수에 저장한 후 출력
	// po 를 변수에 저장한 후 출력
	// ㄱ 을 변수에 저장한 후 출력
	// 가나다라abcde 를 변수에 저장한 후 출력
	// abcd 12345 를 변수에 저장한 후 출력
	// 010-2314-4212 을 변수에 저장한 후 출력
	/*
	float a = 8.888;			double b = 8.888;		
	char c = 'd';			 	int  d = 30;			
	char  e[50] = "루피";		float  f = 3.24+5.34;		
	double  g = 3.24+5.34;		int  h = 10 + 20;		
	float  i = 3.333;			double  j = 3.333;		
	char  k[50] = "po";			char  m[50] = "ㄱ";		
	char  n[50] = "가나다라abcde";	char  p[50] = "abcd 12345";
	char  s[50] = "010-2314-4212";

	printf("%f \n", a);		printf("%f \n", b);	   printf("%c \n", c);
	printf("%d \n", d);		printf("%s \n", e);	   printf("%f \n", f);
	printf("%f \n", g);		printf("%d \n", h);	   printf("%f \n", i);
	printf("%f \n", j);		printf("%s \n", k);	   printf("%s \n", m);
	printf("%s \n", n);		printf("%s \n", p);	   printf("%s \n", s);
	*/

//--------------------------------------------------------------------------

	/*
	변수의 주소 확인하기
	  - 변수앞에 '&'를 사용한다.
	  - 메모리의 주소값은 본래 16진수로 나타내고, 실수 형태로는 나오지 않는다
	    그러므로, 출력시 서식문자를 %d 또는 %p(16진수 값 출력)를 사용한다.
	Ex )   int a = 10;
	       printf("a의 주소 = %d\n", &a);
	*/
	/*
	int a =10;		
	float b=1.11;		
	double c=3.33;
	char d='a'; 	
	char str[20]="가나다";

	printf("a의 주소 : %d \n",  &a );
	printf("b의 주소 : %d \n",  &b );
	printf("c의 주소 : %d \n",  &c );
	printf("d의 주소 : %d \n",  &d );
	printf("str의 주소 : %d \n",  &str );
	*/

//--------------------------------------------------------------------------

	/*
	자료형 변환
	  - 대입식에서 자료형 변환이 일어나는 경우
          : 연산자 우측에 위치한 피연산자의 자료형이 
	       연산자 좌측에 위치한 피연산자의 자료형으로 자동으로 변환됨

	  - 연산식에서 자료형 변환이 일어나는 경우
	      : 서로 다른 자료형이 연산을 하려고 할 때 
	       차지하는 공간의 크기가 작은 자료형이 
	       공간의 크기가 큰 자료형으로 자동으로 변환됨

	  - 강제형변환 (cast 연산자 이용)
	      : 강제적으로 변환할 자료형을
	       cast 연산자를 통해 명령하여 변환하는 것
          Ex -> (변환할 자료형)변수 이름, (변환할 자료형)상수  		  
	*/
	

	//대입식에서 값의 변환
	/*
	int  num1;
	double  num2 = 367.78;

	num1 = num2;		
	printf("num1 = %d \n",  num1);
	*/

//--------------------------------------------------------------------------

	//연산식에서 자료형 변환
	
	/*
	double   a;

	a = 5 / 2;
	printf(" 공간 a에 담긴 값 = %f \n",  a);
	printf(" 연산식 5/2 의 결과 공간 크기 = %d \n",  sizeof(5/2) );
	printf(" 변수 a 의 공간 크기 = %d \n",  sizeof(a) );

	a = 5 / 2.0;

	printf(" 공간 a에 담긴 값 = %f \n",  a);
	printf(" 연산식 5/2.0 의 결과 공간 크기 = %d \n",  sizeof(5/2.0) );
	printf(" 변수 a 의 공간 크기 = %d \n",  sizeof(a) );
	//※ sizeof() ? 자료형(공간)의 크기를 알려주는 명령어

	*/

//--------------------------------------------
	
	// 강제 형변환
	/*
	double  a;

	a = 5 / 2;

	printf(" 공간 a에 담긴 값 = %f \n",  a);

	a = (double) 5 / 2;

	printf(" 공간 a에 담긴 값 = %f \n",  a);

	*/
	
	/*
	int n1=5, n2=7;
	double n3;

	n3 = (double)n1 / n2;

	printf("n1 = %d, n2 = %d , n3 = %f\n", n1, n2, n3 );
	*/

}
#include<stdio.h>

void main(){

	//escape문자(특수문자)
	printf("1000+2000 = ? 그냥쓰기");
	printf("탭\t탭\n");
	printf("덮어쓰기 12\r345678\n");
	printf("한칸왼쪽 12\b345678\n");
	printf("역슬래쉬 두번 쓰면 원화\\1000  \n");

	printf("\n");

	printf("\t\t#### 회비 정보 ####\n");
	printf("===============================================\n");
	printf("\t이름\t\t나이\t\t회비\n");
	printf("===============================================\n");
	printf("\t홍길동\t\t15\t\t\\20000\n");
	printf("\t임꺽정\t\t15\t\t\\30000\n");
	printf("\t김말숙\t\t15\t\t\\50000\n");
	printf("------------------------------------------------\n");
	printf("\t총합계\t\t\t\t\\80000\n");
	printf("================================================\n");

	printf("\n");

	/*
	제어(서식) 문자
	: 입력 또는 저장된 데이터의 자료형에 따라서 약속된 출력 문자명령어
	 %d 정수, %f 소수, %c 단일문자, %s 문장(문자열)

	표현 방법
	: 1. 입력된 데이터를 담당하는 제어문자가 반드시 존재해야 한다.
	  2. %c 는 영문자 하나만 표현 가능하고, 표현하는 '데이터' 외따옴표
	     로 묶어줘야 한다.
	  3. %s 는 문자열(문장)을 출력하고, 표현하는 "데이터"는 쌍따옴표로 
	    묶어줘야 한다.
	  4. 입력되는 데이터에 수식을 입력하면, 컴퓨터가 계산해서 출력해준다.
	    단, 입력되는 자료형태와 제어문자는 같아야 한다.
	*/
	printf("%d , %f, %c, %s \n", 5, 3.14, 'A', "이렇게 하는거임" );

	printf("\n");

	printf("%d    +   %d   =   %d   \n",  5,  12,   5 + 12   );
	printf("%d    +   %d   =        \n",  5,  12,   5 + 12   );
	printf("%d    +   %d   =   %d   \n",  5,  12             );

	printf("\n");

	/*ASCII CODE(아스키코드)
          :American Standard Code for Information interchange
		   문자나 기호를 특정 숫자로 약속한 값
	0011 0000 - 48 = 0
   	0100 0001 - 65 = A
	0110 0001 - 97 = a

	대문자 = 소문자 ? 32 의 공식이 성립
	*/
	printf("숫자 65 와 숫자 97 을 문자형 제어문자에  담으면");
	printf("결과는 %c,  %c  이다.  \n", 65, 97);

	printf("\n");

	printf("%d의 ASCII 코드 문자는 %c 이다.\n", 65, 65);
	printf("%c의 ASCII 코드 숫자는 %d 이다.\n", 'k', 'k');

	printf("\n");

	printf("실수 출력 제어문자 - 실수 대입 : %f \n", 123.456);  
	printf("정수 출력 제어문자 - 실수 대입 : %d \n", 123.456);  
	printf("실수 출력 제어문자 - 정수 대입 : %f \n", 123);
	//제어문자는 짝을 이루는 데이터 형태만 출력-변환이 가능하다
	//짝을 이루지 않는 제어문자-데이터 형은 쓰레기 값이 출력된다.
	//실수형 상수는 소수점 이하 6자리로 표현된다.
	printf("\n");

	printf("%d \n", 30 );
	printf("%f \n", 2.89 );
	printf("%c \n", 'G' );
	printf("%s \n", "This is a string" );

	printf("\n");

	/* %.2f : %하고 .정수를 입력하면 해당 숫자의 자릿수까지만 표현
        가능하다. 단, 표현하고자 하는 자리의 뒤의 자리가 5이상이면 
        반올림되어 표현된다. */
	printf("소수점 3자리 까지 표현 : %.3f \n", 123.4567);
	printf("소수점 3자리 까지 표현 : %.3f \n", 123.4321);

	printf("\n");

	/* %8.2f : % 하고 '정수1.정수2'를 하면 앞에 정수1은 표현하고자 하는 공간의
	개수를 말하는 것이고, 소수점 뒤의 정수2는 표현하고자 하는 소숫점 자릿수를
	말한다. 단, 공간을 확보하는 정수1의 앞에 '-'를 붙이면 공간의 앞에서 부터 정렬되어
	출력 되고, '-'없으면 공간의 뒤에서 부터 정렬되어 출력 된다. 소숫점도
	하나의 자리로 판단한다.*/
	printf("7개 공간, 소숫점 자리 하나, 앞에서 정렬 : >%-7.1f< \n",123.34);
	printf("7개 공간, 소숫점 자리 하나, 뒤에서 정렬 : >%7.1f< \n",123.34);

}
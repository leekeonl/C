#include <stdio.h>

void main(){

	/*
	함수
	1. 사용자가 정의하는 것이다.
	2. 반복되는 내용을 따로 묶어서 처리하는 단위이다.
	3. 독립된 모듈이다.
	4. 호출된 함수는 반드시 호출한 곳으로 되돌아 온다.
	5. 전달받는 인수(매개변수)는 개수에 상관없다.
	6. 반환값(return value)은 1개 뿐이다.
	7. 반환값이 없으면 결과형은 void 이다.
	8. 함수를 사용하면 코드의 길이가 짧아지고, 이해가 쉽다.
	9. 프로그램의 유지와 보수가 용이해 진다.

	함수의 형식
	1. 선언 : 컴파일러에게 어떤 함수가 존재하고 있음을 미리 알려준다.
		  함수의 원형이라고도 하며, main 함수 전에 위치한다.
	
	ex )  결과자료형    함수명(자료형,자료형, .....);
	       ①int	    ②name( ③int x, double y );

	-----------------------------------------------------

	2. 정의 : 함수를 호출 했을때 실행 할 기능을 구현
		  함수의 정의는 함수를 만드는 작업이지, 함수의 실행을 의미하지는 않는다.
		  main 함수 밑에 위치한다.		

	ex )  결과자료형    함수명(자료형 인수1, 자료형 인수2, .....)
		①int       ②name( ③int x, double y )
	      {	
		   함수 몸체
		    : 변수 선언;	
		      실행하려는 명령문;	
		   ④return 반환값:

	       }	

	      ① 결과자료형( return type ) 	
		 : 함수의 실행이 종료된 이후에 함수의 실행 결과로 나올 값의 자료형.
		   함수의 실행 결과와 return type은 항상 같은 자료형 이어야 한다. 
		   리턴값(결과값)이 없을 경우 void형을 사용한다.
	      ② 함수명
		 : 작성 규칙은 변수명 작성 규칙과 동일하다. 
		   실제 사용하는 함수이름으로써, 함수의 기능을 예측 할 수 있는 함수명으로
		   정해주는 것이 좋다.	
	      ③ 인수( 매개 변수 )
		 : 호출부에서 전달된 값을 받아서 함수에서 사용 할 변수의 초기값을 말한다.
		   호출부에서 전달된 값이 없는 경우 공란 or void를 입력한다.
		   인수가 여러개일 경우에는 컴마','로 구분한다.
		   함수의 선언부에는 매개변숨명 없이 매개변수의 자료형만 기재하는 것도 가능. 
	      ④ return
		 : 함수의 결과값을 호출함수로 되돌려 줄 때 사용한다.
		   return 뒤쪽에 어떠한 값을 쓰면 그 값이 함수의 실행 결과 값이 되며,
		   실행 결과는 함수가 호출된 곳으로 되돌아 간다.
		   호출함수로 되돌려 줄 값이 없는 경우는 생략 가능하다.
		   함수를 강제 종료 시킬 때도 사용한다. 즉, return문을 만나면,
		   함수의 뒷부분에 내용이 남아 있어도 무조건 함수를 종료하고,
		   함수를 호출한 곳으로 되돌아간다.
		   
	3. 호출 : 호출하는 함수에게 인수를 넘겨주고 동작을 시킨다.
		  

	ex ) ②함수명( ③인수1, 인수2, ..... );
	      name( a, b );

	===============================================================================

	작성 예제 및 동작 순서
	
	예제1.	return type 함수명 (매개변수 리스트);

		void main ( ) {

			① 함수명(매개변수);
			
			④ 명령문;

		}

		 return type 함수명 (②매개변수 리스트) {

			③ 함수의 내용;
		}

		------------------------------------------

 	예제2.	return type 함수명 ( ② 매개변수 리스트) {

 			③ 함수의 내용;
		}

		void main ( ) {

			① 함수명(매개변수);

			④ 명령문;
		}
	*/

//=============================================================

// 함수의 기본 선언
/*
void func();   // 함수의 선언 
                    //:  함수가  존재하고  있음을  미리  알림
void main(){

	func();   // 함수의 호출
				   //: 함수를  사용하겠다고  알림
}

void func(){   // 함수의 정의
					 //: 호출을  받으면  함수   실행
	printf("하하하\n");
}
*/

//---------------------------------

// 함수의  매개변수와  리턴값이  없는 경우
/*
#include <stdio.h>

void  cal();

void  main () {

	cal();
}

void  cal() {

	int  a = 20,  b = 10;
	printf("cal 함수의 +  :  %d \n",  a + b );
	printf("cal 함수의 -  :  %d \n",  a - b );
	printf("cal 함수의 *  :  %d \n",  a * b );
}
*/

// 입력 받은 값 까지의 합
/*
#include <stdio.h>

void SumFunc ( ) ;

void  main( ){

	SumFunc ( ) ;
}

void SumFunc ( ){

	int   i, n, sum=0  ;
	
	printf("정수 입력 : ");
	scanf("%d", &n ) ;
	
	for( i=0 ; i<=n ; i++ )
		sum += i ;
	
	printf("%d\n", sum ) ;
}	
*/

//---------------------------------

// 함수의 매개변수는  있고 , 리턴값이  없는  경우
/*
#include <stdio.h>

void  Plus( double  a, double  b) ;

void main()
{
	Plus ( 2.5 ,  3.4 ) ;
 }

void Plus( double a, double b )
{
	double  c ;

	c = a + b ;
	
	printf("%.2f + %.2f = %.2f\n", a , b, c ) ;
}
*/

//---------------------------------

// 함수의 매개변수는 없고 , 리턴값은 있는  경우
/*
#include <stdio.h>

int  plus( );

void  main ( ) {
	int  a;
	a = plus( );
	printf( "%d\n", a);
}

int plus( ) {  // 실행결과로 int가 나오는 plus함수
	int  x = 10, y = 15;
	printf( "%d + %d = ", x, y);
	return  x + y;
}
*/

//---------------------------------

//함수의 매개변수와  리턴값 둘다  있는  경우
/*
#include <stdio.h>

int  plus ( int  x, int  y) ;

void main ( ) {
	int  a;

	a = plus( 10 , 15 );
	printf("%d\n", a);
}

int plus( int x, int y) { 	// 실행결과로 int가 나오는 plus함수
	
	printf("%d + %d = ", x, y);
	return x + y;
}
*/

//---------------------------------

// 함수를 이용한 영문 소문자를 대문자로 변환
/*
#include <stdio.h>

char upper(char alpha);

void main(){

     char showAl, in;

     printf("영어 소문자를 입력 : ");
     scanf("%c", &in);
     
     showAl = upper(in);

     printf("돌아온 값 = %c\n", showAl);
}

char upper(char alpha){

     return (alpha-32);
}
*/


//---------------------------------

//예제 - 입력받은 값을 함수를 이용해 검사하고
//       함수의  return값으로 재입력을 결정
/*
#include <stdio.h>
int  check ( int x ) ;
void  main ( ) {
	int a	;
	do {
		printf ( "당신의 나이를 입력해 주세요 : ") ;
		scanf ( "%d", &a ) ;
	} while ( check ( a ) ) ;
	printf ( "당신의 나이는 %d입니다. \n", a ) ;
}

int  check ( int x ) {
	if( x < 0 || x >= 100 ) {
		printf ( "나이는  0보다  작거나  100보다  클  수 없습니다. \n" ) ;
		printf ( "다시 입력해 주세요\n" ) ;
		return 1;
	}
	return 0;
}
*/

// return 문의 활용
/*
#include <stdio.h>

int judge ( int  x, int  y) ;

void main ( ) {
	int  in1, in2, max;

	printf("두개의 정수 입력 : ");
	scanf("%d%d",&in1, &in2);

	max = judge( in1 , in2 );

	if(max==0)
	   printf("입력값이 같다\n");
	else
	   printf("큰수 = %d\n", max);
}

int judge( int x, int y) { 	// 
	
	if(x>y)
	   return x;
	else if(x==y)
	   return 0;
	else
	   return y;
}
// 함수는 return 문을 실행하면 해당 함수를 종료하고, 
// 호출한 곳으로 값을 반환 한다.




















}